#!/bin/bash

# Load our firewall from scratch

#set -euf -o pipefail

TABLES_ROOT='/etc/iptables'

BLACKLIST_FILE=$TABLES_ROOT/blacklist.txt

WHITELIST_FILE=$TABLES_ROOT/whitelist.txt

SERVICES_FILE=$TABLES_ROOT/services.txt

SAVED_RULES=$TABLES_ROOT/rules.v4

##
# These need to be true and there is no corrective action that we
# can take if they are not
##
if [[ $EUID -ne 0 ]]; then
  echo "This script must be run as root" 1>&2
  exit 1
fi

FOUND=`which iptables`
if [ -z "$FOUND" ]; then
  echo "iptables does not appear to be installed" 1>&2
  exit 1
fi

FOUND=`uname -s`
if [ "$FOUND" != "Linux" ]; then
  echo "This software assumes we are running Linux" 1>&2
  exit 1
fi

##
# Things that need to exist but we can fix them if they do not
##
if [ ! -d "$TABLES_ROOT" ]; then
  echo "The directory $TABLES_ROOT is missing"
  mkdir $TABLES_ROOT
fi

# Force the permissions
chmod a=rx,u+w $TABLES_ROOT

if [ ! -r "$BLACKLIST_FILE" ]; then
  echo "The file $BLACKLIST_FILE is missing"
  touch $BLACKLIST_FILE
fi

# Force the permissions
chmod a=r,u+w $BLACKLIST_FILE

if [ ! -r "$WHITELIST_FILE" ]; then
  echo "The file $WHITELIST_FILE is missing"
  touch $WHITELIST_FILE
fi

# Force the permissions
chmod a=r,u+w $WHITELIST_FILE

if [ ! -r "$SERVICES_FILE" ]; then
  echo "The file $SERVICES_FILE is missing"
  echo 22 > $SERVICES_FILE
fi

# Force the permissions
chmod a=r,u+w $SERVICES_FILE

# Flush all current rules from iptables

iptables --flush
iptables --delete-chain
iptables -t nat --flush 
iptables -t nat --delete-chain 
iptables -t mangle --flush 
iptables -t mangle --delete-chain 

# Set default policies for INPUT, FORWARD and OUTPUT chains

iptables -P INPUT DROP 
iptables -P FORWARD DROP 
iptables -P OUTPUT ACCEPT

# Set access for localhost

iptables -A INPUT -i lo -j ACCEPT 
iptables -A OUTPUT -o lo -j ACCEPT

# Accept packets belonging to established and related connections

iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT

# security checks: force SYN checks, drop all fragments, drop XMAS packets, drop null packets 
# see: http://security.blogoverflow.com/2011/08/base-rulesets-in-iptables/ 
iptables -A INPUT -p tcp ! --syn -m state --state NEW -j DROP 
iptables -A INPUT -f -j DROP 
iptables -A INPUT -p tcp --tcp-flags ALL ALL -j DROP 
iptables -A INPUT -p tcp --tcp-flags ALL NONE -j DROP

# allow icmp 
iptables -A INPUT -p icmp -m icmp --icmp-type echo-request -m limit --limit 1/second -j ACCEPT 
iptables -A INPUT -p icmp -m icmp --icmp-type fragmentation-needed -m limit --limit 1/second -j ACCEPT 
iptables -A INPUT -p icmp -m icmp --icmp-type source-quench -m limit --limit 1/second -j ACCEPT 

# Load the whitelist

iptables -N WHITELIST
iptables -A INPUT -j WHITELIST
iptables -A WHITELIST -j RETURN

while read -r LINE
do
  IP_ADDRESS=`echo $LINE | cut -d" " -f1`
  PORT=`echo $LINE | cut -d" " -f2`

  if [ "$PORT" = "any" ]; then
    echo "iptables -I WHITELIST -p tcp -s $IP_ADDRESS -j ACCEPT"
  else
    echo "iptables -I WHITELIST -p tcp -s $IP_ADDRESS --dport $PORT -j ACCEPT"
  fi
done < $WHITELIST_FILE

# Load the banned addresses

iptables -N BLACKLIST
iptables -A INPUT -j BLACKLIST
iptables -A BLACKLIST -j RETURN

for ADDRESS in `cat $BLACKLIST_FILE`
do
  iptables -I BLACKLIST -s $ADDRESS -j DROP
done

# Permitted ports

iptables -N SERVICES
iptables -A INPUT -j SERVICES
iptables -A SERVICES -j RETURN

for PORT in `cat $SERVICES_FILE`
do
  iptables -I SERVICES -p tcp --dport $PORT -m state --state NEW -s 0.0.0.0/0 -j ACCEPT 
done

# Save settings

iptables-save > $SAVED_RULES

echo "Firewall setup and saved"
